/*
 *
 * Copyright  1990-2006 Sun Microsystems, Inc. All Rights Reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version
 * 2 only, as published by the Free Software Foundation. 
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License version 2 for more details (a copy is
 * included at /legal/license.txt). 
 * 
 * You should have received a copy of the GNU General Public License
 * version 2 along with this work; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA 
 * 
 * Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa
 * Clara, CA 95054 or visit www.sun.com if you need additional
 * information or have any questions. 
 */
package com.sun.mmedia;

import javax.microedition.media.Manager;

/**
 *  The default configuration module for an MMAPI.
 *  implementation supporting the http and
 *  device protocols as well as the following
 *  content types:
 *
 *      Tones,
 *      Tone Sequences,
 *      AMR Narrowband
 *      AMR Wideband.
 *      GIF.
 *
 *  Please note:
 *
 *  Tone Sequences are supported over http in tone sequence
 *  file format (.jts).
 *
 *  Both single tones and tone sequence are also supported
 *  over the device protocol.
 *
 */
public class DefaultConfiguration extends Configuration {

    /**
     * Tone sequence mime type.
     */
    public final static String MIME_AUDIO_TONE = "audio/x-tone-seq";

    /**
     * MIME_AUDI_AMR NB mime type.
     */
    public final static String MIME_AUDIO_WAV = "audio/x-wav";

    /**
     * MIME_AUDIO_MIDI mime type.
     */
    public final static String MIME_AUDIO_MIDI = "audio/midi";
    public final static String MIME_AUDIO_MIDI_2 = "audio/mid";

    /**
     * SP-MIME_AUDIO_MIDI mime type.
     */
    public static final String MIME_AUDIO_SP_MIDI = "audio/sp-midi";

    public final static String maps[][] = {
        {Manager.TONE_DEVICE_LOCATOR, "com.sun.mmedia.DirectTone"},
        {MIME_AUDIO_TONE, "com.sun.mmedia.DirectTone"},
        {MIME_AUDIO_WAV, "com.sun.mmedia.DirectPlayer"},
        {MIME_AUDIO_MIDI, "com.sun.mmedia.DirectPlayer"},
        {MIME_AUDIO_MIDI_2, "com.sun.mmedia.DirectPlayer"},
    };

    /**
     *Constructor for the DefaultConfiguration object
     */
    public DefaultConfiguration() {
        super();

        // Protocol handlers.
        handlers.put("http", "com.sun.mmedia.protocol.CommonDS");
    // #ifdef USE_FILE_CONNECTION [
        handlers.put("file", "com.sun.mmedia.protocol.CommonDS");
    // #endif

        // Content handlers.
        for (int i = 0; i < maps.length; ++i) {
            handlers.put(maps[i][0], maps[i][1]);
        }

        // Mime types
        mimeTypes.put("jts", MIME_AUDIO_TONE);
        mimeTypes.put("mid", MIME_AUDIO_MIDI);
        mimeTypes.put("midi", MIME_AUDIO_MIDI);
        mimeTypes.put("kar", MIME_AUDIO_MIDI);
        mimeTypes.put("wav", MIME_AUDIO_WAV);
        
        // for converting
        mimeTypes.put("audio/tone", MIME_AUDIO_TONE);

    }


    /**
     *  Gets the supportedContentTypes attribute of the DefaultConfiguration object
     *
     * @param  protocol  Description of the Parameter
     * @return           The supportedContentTypes value
     */
    public String[] getSupportedContentTypes(String protocol) {
        if (protocol == null) {
            return new String[]{
            // Mandatory support
                MIME_AUDIO_TONE,
            // Optional formats
                MIME_AUDIO_MIDI,
                MIME_AUDIO_MIDI_2,
                MIME_AUDIO_WAV,
                };
        }

        if (protocol.equals("device")) {
            return new String[]{
            // Mandatory support
                MIME_AUDIO_TONE,
            // Optional formats
                };
        }

        if (protocol.equals("http")) {
            return new String[]{
                MIME_AUDIO_TONE,
                MIME_AUDIO_MIDI,
                MIME_AUDIO_MIDI_2,
                MIME_AUDIO_WAV,
                };
        }

    // #ifdef USE_FILE_CONNECTION [
        if (protocol.equals("file")) {
            return new String[]{
                MIME_AUDIO_TONE,
                MIME_AUDIO_MIDI,
                MIME_AUDIO_MIDI_2,
                MIME_AUDIO_WAV,
                };
        }
    // #endif ]

        return new String[0];
    }

    /**
     * Get content type helper function
     */
    public static String getContentType(String locator) {
        if (locator != null) {
            // device://tone
            if (locator.equals(Manager.TONE_DEVICE_LOCATOR)) {
                return DefaultConfiguration.MIME_AUDIO_TONE;
            }
        }

        return "";
    }

    /**
     *  Gets the supportedProtocols attribute of the DefaultConfiguration object
     *
     * @param  content_type  Description of the Parameter
     * @return               The supportedProtocols value
     */
    public String[] getSupportedProtocols(String content_type) {
        System.out.println("in config.getSupportedProtocols: " + content_type);

        if (content_type == null) {
            return new String[]{
                "device",
                "http",
            // #ifdef USE_FILE_CONNECTION [
                "file",
            // #endif ]
                };
        }

        if (content_type.equals(MIME_AUDIO_TONE)) {
            return new String[]{
                "device",
                "http",
            // #ifdef USE_FILE_CONNECTION [
                "file",
            // #endif ]
                };
        }

        if (content_type.equals(MIME_AUDIO_MIDI)) {
            return new String[]{
                "http",
            // #ifdef USE_FILE_CONNECTION [
                "file",
            // #endif ]
                };
        }

        if (content_type.equals(MIME_AUDIO_MIDI_2)) {
            return new String[]{
                "http",
            // #ifdef USE_FILE_CONNECTION [
                "file",
            // #endif ]
                };
        }

        if (content_type.equals(MIME_AUDIO_WAV)) {
            return new String[]{
                "http",
            // #ifdef USE_FILE_CONNECTION [
                "file",
            // #endif ]
                };
        }

        return new String[0];
    }

    /**
     * Gets the video renderer.
     *
     * @return The video renderer
     */
    public VideoRenderer getVideoRenderer(BasicPlayer player, 
                                          int sourceWidth, 
                                          int sourceHeight) {
        return null;
        //return new MIDPVideoRenderer(player, sourceWidth, sourceHeight);
    }

    /**
     *  Gets the tonePlayer attribute of the DefaultConfiguration object
     *
     * @return    The tonePlayer value
     */
    public TonePlayer getTonePlayer() {
        return new NativeTonePlayer();
    }
    
    public String getProperty(String key) {
        String value = (String) properties.get(key);
        
        return value;
    } 

    public void setProperty(String key, String value) {
        properties.put(key, value);
    }       

    private Object createInstanceOf(String propertyName) {
        try {
            String propertyValue = getProperty(propertyName);
            Class propertyClass = Class.forName(propertyValue);
            Object propertyInstance = propertyClass.newInstance();
            return propertyInstance;
        } catch (Exception e) {
            return null;
        }
    }
}
